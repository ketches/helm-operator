# Example of complex HelmRelease with advanced configuration
apiVersion: helm-operator.ketches.cn/v1alpha1
kind: HelmRelease
metadata:
  name: complex-app
  namespace: production
spec:
  chart:
    name: "my-application"
    version: "2.1.0"
    repository:
      name: "company-repo"
      namespace: "helm-system"
  release:
    name: "complex-app"
    namespace: "production"
    createNamespace: true
  values: |
    # Application configuration
    app:
      name: "complex-app"
      version: "2.1.0"
      environment: "production"
    
    # Scaling configuration
    replicaCount: 3
    autoscaling:
      enabled: true
      minReplicas: 3
      maxReplicas: 10
      targetCPUUtilizationPercentage: 70
    
    # Image configuration
    image:
      repository: "registry.company.com/my-app"
      tag: "v2.1.0"
      pullPolicy: "IfNotPresent"
    
    # Service configuration
    service:
      type: "ClusterIP"
      port: 8080
      targetPort: 8080
      annotations:
        service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
    
    # Ingress configuration
    ingress:
      enabled: true
      className: "nginx"
      annotations:
        nginx.ingress.kubernetes.io/rewrite-target: "/"
        cert-manager.io/cluster-issuer: "letsencrypt-prod"
      hosts:
        - host: "app.company.com"
          paths:
            - path: "/"
              pathType: "Prefix"
      tls:
        - secretName: "app-tls"
          hosts:
            - "app.company.com"
    
    # Resource configuration
    resources:
      limits:
        cpu: "2000m"
        memory: "2Gi"
      requests:
        cpu: "1000m"
        memory: "1Gi"
    
    # Health checks
    livenessProbe:
      httpGet:
        path: "/health"
        port: 8080
      initialDelaySeconds: 30
      periodSeconds: 10
    
    readinessProbe:
      httpGet:
        path: "/ready"
        port: 8080
      initialDelaySeconds: 5
      periodSeconds: 5
    
    # Environment variables
    env:
      - name: "APP_ENV"
        value: "production"
      - name: "DATABASE_URL"
        valueFrom:
          secretKeyRef:
            name: "app-secrets"
            key: "database-url"
      - name: "REDIS_URL"
        value: "redis://redis.cache.svc.cluster.local:6379"
    
    # Persistence
    persistence:
      enabled: true
      storageClass: "gp2"
      size: "10Gi"
    
    # Security context
    securityContext:
      runAsNonRoot: true
      runAsUser: 1000
      fsGroup: 2000
    
    # Pod security context
    podSecurityContext:
      seccompProfile:
        type: RuntimeDefault
    
    # Network policies
    networkPolicy:
      enabled: true
      ingress:
        - from:
          - namespaceSelector:
              matchLabels:
                name: "ingress-nginx"
          ports:
          - protocol: TCP
            port: 8080
  
  # Install configuration
  install:
    timeout: "15m"
    wait: true
    waitForJobs: true
    skipCRDs: false
    replace: false
    disableHooks: false
  
  # Upgrade configuration
  upgrade:
    timeout: "15m"
    wait: true
    waitForJobs: true
    force: false
    resetValues: false
    reuseValues: false
    recreate: false
    maxHistory: 10
    cleanupOnFail: true
    disableHooks: false
  
  # Uninstall configuration
  uninstall:
    timeout: "10m"
    disableHooks: false
    keepHistory: false
  
  # Automatic reconciliation
  interval: "2h"
  suspend: false
  
  # Dependencies
  dependsOn:
    - name: "database"
      namespace: "database"
    - name: "cache"
      namespace: "cache"